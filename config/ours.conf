
///////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file to extract MFCC features <  //////////////////
/////////   HTK target kind: MFCC_0_D_A, numCeps=12                  //////////////////
/////////                                                            //////////////////
/////////  * written 2009 by Florian Eyben *                         //////////////////
/////////                                                            //////////////////
///////// (c) 2009 by Florian Eyben, Martin Woellmer, Bjoern Schuller//////////////////
/////////     see the file COPYING for details                       //////////////////
///////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////
;
; This section is always required in openSMILE configuration files
;   it configures the componentManager and gives a list of all components which are to be loaded
; The order in which the components are listed should match 
;   the order of the data flow for most efficient processing
;
///////////////////////////////////////////////////////////////////////////////////////
[componentInstances:cComponentManager]
instance[dataMemory].type = cDataMemory
 ; wave file input
instance[waveIn].type = cWaveSource
 ; audio framer
instance[frame].type = cFramer
 ; speech pre-emphasis (on a per frame basis as HTK does it)
instance[pe].type = cVectorPreemphasis
 ; apply a window function to pre-emphasised frames
instance[win].type = cWindower
instance[energy].type = cEnergy
 ; transform to the frequency domain using FFT
instance[fft].type = cTransformFFT
 ; compute magnitude of the complex fft from the previous component
instance[fftmag].type = cFFTmagphase
 ; compute Mel-bands from magnitude spectrum
instance[melspec].type = cMelspec
 ; compute MFCC from Mel-band spectrum
instance[mfcc].type = cMfcc
instance[lpc].type = cLpc
instance[formants].type = cFormantLpc
 ; write the result to an HTK parameter file
instance[htkout].type = cHtkSink

; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=3
; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


  /////////////////////////////////////////////////////////////////////////////////////////////
 /////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with 
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[waveIn:cWaveSource]
writer.dmLevel = wave
filename=\cm[inputfile(I){test.wav}:name of input file]
monoMixdown=1

[frame:cFramer]
reader.dmLevel = wave
writer.dmLevel = frames
noPostEOIprocessing = 1
copyInputName = 1
frameSize = 3
frameStep = 1
frameMode = fixed
frameCenterSpecial = left

[pe:cVectorPreemphasis]
reader.dmLevel = frames
writer.dmLevel = framespe
k = 0.97
de = 0

[win:cWindower]
reader.dmLevel = framespe
writer.dmLevel = winframes
copyInputName = 1
processArrayFields = 1
 ; hamming window
winFunc = ham
 ; no gain, no offset
gain = 1.0
offset = 0

[energy:cEnergy]
reader.dmLevel = winframes
writer.dmLevel = energy
rms=1
log=0

[fft:cTransformFFT]
reader.dmLevel = winframes
writer.dmLevel = fft
copyInputName = 1
processArrayFields = 1
inverse = 0

[fftmag:cFFTmagphase]
reader.dmLevel = fft
writer.dmLevel = fftmag
copyInputName = 1
processArrayFields = 1
inverse = 0
magnitude = 1
phase = 0

[melspec:cMelspec]
reader.dmLevel = fftmag
writer.dmLevel = melspec
copyInputName = 1
processArrayFields = 1
; htk compatible sample value scaling
htkcompatible = 1
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 1
lofreq = 0
hifreq = 8000
specScale = mel
inverse = 0

[mfcc:cMfcc]
reader.dmLevel = melspec
writer.dmLevel = ft0
copyInputName = 1
processArrayFields = 1
firstMfcc = 0
lastMfcc  = 12
cepLifter = 22.0
htkcompatible = 1

[lpc:cLpc]
reader.dmLevel = frames
writer.dmLevel = lpc

[formants:cFormantLpc]
reader.dmLevel = lpc
writer.dmLevel = formants
saveNumberOfValidFormants = 1

//////////////////////////////////////////////////////////////////////
///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

[htkout:cHtkSink]
reader.dmLevel = ft0;formants;energy
filename=\cm[output(O){mfcc_formants_energy.htk}:name of MFCC output filename (HTK format)]
append = 0
 ; MFCC_0_D_A  6+256+512+8192 = 8966
parmKind = 8966


//////---------------------- END -------------------------///////

